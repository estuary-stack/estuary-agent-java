version: 2 # use CircleCI 2.0
jobs: # a collection of steps
  build: # runs not using Workflows must have a `build` job as entry point

    working_directory: ~/estuary-testrunner # directory where steps will run

    docker: # run the steps with Docker
      - image: circleci/openjdk:11-jdk-stretch # ...with this image as the primary container; this is where all `steps` will run

    steps: # a collection of executable commands

      - checkout # check out source code to working directory

      - restore_cache: # restore the saved cache after the first run or if `pom.xml` has changed
          # Read about caching dependencies: https://circleci.com/docs/2.0/caching/
          key: estuary-testrunner-{{ checksum "pom.xml" }}

      - run: mvn dependency:go-offline # gets the project dependencies

      - save_cache: # saves the project dependencies
          paths:
            - ~/.m2
          key: estuary-testrunner-{{ checksum "pom.xml" }}
      - run:
          command: wget https://github.com/dinuta/estuary-testrunner/releases/download/4.0.5/start.py-linux
          name: "download start.py"
      - run:
          command: mv start.py-linux start.py
          name: "rename start.py-linux"
      - run:
          command: chmod +x start.py
          name: "chmod +x start.py"

      - run: mvn clean install # run the actual tests

      - store_artifacts: # store the uberjar as an artifact
          # Upload test summary for display in Artifacts: https://circleci.com/docs/2.0/artifacts/
          path: target/testrunner-4.0.5.jar
      # See https://circleci.com/docs/2.0/deployment-integrations/ for deploy examples
