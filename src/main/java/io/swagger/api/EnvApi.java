/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.13).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package io.swagger.api;

import io.swagger.annotations.*;
import io.swagger.model.ApiResponseFailure;
import io.swagger.model.ApiResponseSuccess;
import io.swagger.model.Envvar;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import javax.validation.Valid;

@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2020-06-14T18:02:50.529Z")

@Api(value = "env", description = "the env API")
@RequestMapping(value = "")
public interface EnvApi {

    @ApiOperation(value = "Gets the environment variable value from the environment", nickname = "envEnvNameGet", notes = "", response = ApiResponseSuccess.class, tags = {"estuary-testrunner",})
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "Get env var success", response = ApiResponseSuccess.class),
            @ApiResponse(code = 404, message = "Get env var failure", response = ApiResponseFailure.class)})
    @RequestMapping(value = "/env/{env_name}",
            produces = {"application/json"},
            method = RequestMethod.GET)
    default ResponseEntity<ApiResponseSuccess> envEnvNameGet(@ApiParam(value = "The name of the env var to get value from", required = true) @PathVariable("env_name") String envName, @ApiParam(value = "") @RequestHeader(value = "Token", required = false) String token) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "Print all environment variables", nickname = "envGet", notes = "", response = ApiResponseSuccess.class, tags = {"estuary-testrunner",})
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "List of the entire environment variables", response = ApiResponseSuccess.class)})
    @RequestMapping(value = "/env",
            produces = {"application/json"},
            method = RequestMethod.GET)
    default ResponseEntity<ApiResponseSuccess> envGet(@ApiParam(value = "") @RequestHeader(value = "Token", required = false) String token) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @ApiOperation(value = "Set environment variables", nickname = "envPost", notes = "", response = ApiResponseSuccess.class, tags = {"estuary-testrunner",})
    @ApiResponses(value = {
            @ApiResponse(code = 200, message = "Set environment variables success", response = ApiResponseSuccess.class),
            @ApiResponse(code = 404, message = "Set environment variables failure", response = ApiResponseFailure.class)})
    @RequestMapping(value = "/env",
            produces = {"application/json"},
            method = RequestMethod.POST)
    default ResponseEntity<ApiResponseSuccess> envPost(@ApiParam(value = "List of env vars by key-value pair", required = true) @Valid @RequestBody Envvar envVars, @ApiParam(value = "") @RequestHeader(value = "Token", required = false) String token) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }

}
